{"version":3,"sources":["app/index.js","serviceWorker.js","index.js"],"names":["getRoutinesFromServer","doneFetchingCb","a","axios","get","result","console","log","data","addRoutineOnServer","doneAddedCb","post","styles","StyleSheet","create","container","flex","width","height","header","flexDirection","alignItems","justifyContent","backgroundColor","body","footer","Header","props","View","Text","style","fontSize","Body","display","addMode","routines","refreshRoutines","scrollStyle","marginVertical","routineStyle","borderColor","borderWidth","borderRadius","nameStyle","textAlign","textDecorationLine","procedureStyle","Add","doneAdding","ScrollView","map","routine","index","key","name","procedure","Footer","onPressRoutines","onPressAdd","marginLeft","Button","title","color","onPress","Routine","setName","setProcedure","submit","cancel","TextInput","marginBottom","editable","placeholder","onChangeText","text","value","multiline","margin","useState","Container","setAddMode","setRoutines","refreshFromServer","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7544d178.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { Button, ScrollView, StyleSheet, Text, TextInput, View } from 'react-native';\nimport axios from 'axios';\n\nconst serverRoutinesURL = (process.env.REACT_APP_SERVER || \"http://localhost:3000/\") + \"routines\";\n\nconst getRoutinesFromServer = async (doneFetchingCb) => {\n  try {\n    const result = await axios.get(serverRoutinesURL)\n    console.log(\"fetched result\", result)\n    doneFetchingCb(result.data)\n  } catch (error) {\n    doneFetchingCb([])\n  }\n}\n\nconst addRoutineOnServer = async (data, doneAddedCb) => {\n  try {\n    const result = await axios.post(serverRoutinesURL, data)\n    console.log(\"add result\", result)\n    doneAddedCb()\n  } catch (error) {\n    console.log(\"error in adding\", error)\n    doneAddedCb()\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100vw',\n    height: '100vh'\n  },\n  header: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'powderblue'\n  },\n  body: {\n    flex: 5,\n    alignItems: 'center',\n    backgroundColor: 'skyblue'\n  },\n  footer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'steelblue'\n  },\n})\n\nfunction Header(props) {\n  const titleStyle = { fontSize: 50 }\n\n  return (\n    <View>\n    <Text style={titleStyle}>\n        {\"Hercules App\"}\n      </Text>\n    </View>\n  )\n}\n\nfunction Body(props) {\n const { addMode, routines, refreshRoutines } = props\n let scrollStyle = { width: '86vw', marginVertical: 10 }\n let routineStyle = { backgroundColor: 'ivory', borderColor: 'black', borderWidth: 2, borderRadius: 5 }\n let nameStyle = { textAlign: 'center', fontSize: 30, textDecorationLine: 'underline' }\n let procedureStyle = { textAlign: 'center', fontSize: 15 }\n let display\n\n if (addMode) {\n   display = (\n     <Add\n       doneAdding={() => {\n         console.log(\"refresh after add\")\n         refreshRoutines()\n       }}\n     />\n   )\n } else {\n   display = (\n     <ScrollView style={scrollStyle}>\n       {\n         routines.map((routine, index) =>\n           <View key={index} style={routineStyle}>\n               <Text style={nameStyle}>\n                     {routine.name}\n                </Text>\n                <Text style={procedureStyle}>\n                      {routine.procedure}\n                </Text>\n          </View>\n         )\n       }\n     </ScrollView>\n   )\n }\n\n  return (\n      <ScrollView style={scrollStyle}>\n        {display}\n      </ScrollView>\n  )\n}\n\nfunction Footer(props) {\n  const { onPressRoutines, onPressAdd } = props\n\n  return (\n    <View style={{ flexDirection: 'row' }}>\n      <View style={{ marginLeft: 10 }}>\n        <Button\n          title={\"ROUTINES\"}\n          color={\"black\"}\n          onPress={() => onPressRoutines()}\n        />\n      </View>\n      <View style={{ marginLeft: 10 }}>\n        <Button\n          title={\"ADD\"}\n          color={\"darkgreen\"}\n          onPress={() => onPressAdd()}\n        />\n      </View>\n    </View>\n  )\n}\n\nfunction Container() {\n  const [ addMode, setAddMode ] = useState(false)\n  const [ routines, setRoutines ] = useState([])\n  const refreshFromServer = () => getRoutinesFromServer(routines => setRoutines(routines))\n\n  useEffect(() => {\n      getRoutinesFromServer(routines => setRoutines(routines))\n  }, [])\n  return (\n    <View style={styles.container}>\n\n      <View style={styles.header}>\n          <Header/>\n      </View>\n\n      <View style={styles.body}>\n          <Body\n            addMode={addMode}\n            routines={routines}\n            refreshRoutines={() => {\n            console.log(\"refresh routines\")\n            refreshFromServer()\n            setAddMode(false)\n        }}\n\n          />\n      </View>\n\n      <View style={styles.footer}>\n          <Footer\n            onPressRoutines={() => {\n               console.log(\"refresh routines\")\n               refreshFromServer()\n               setAddMode(false)\n            }}\n            onPressAdd={() => {\n              console.log(\"setting addMode\")\n              setAddMode(true)\n            }}\n          />\n      </View>\n\n    </View>\n  )\n}\n\nfunction Routine(props) {\n  const { name, procedure, setName, setProcedure, submit, cancel } = props\n  const routineStyle = {\n    backgroundColor: 'cornsilk',\n    borderColor: 'black', borderWidth: 2, borderRadius: 5\n  }\n\n  return (\n    <View style={routineStyle}>\n      <View style={{ flex:1, flexDirection: 'row' }}>\n        <View style={{ flex: 2, justifyContent: 'center' }}>\n          <Text style={{ fontSize: 16, marginLeft: 5 }}>\n            {\"Name\"}\n          </Text>\n        </View>\n        <View style={{ flex: 5 }}>\n          <TextInput\n            style={{ height: 40, backgroundColor: 'ivory', marginBottom: 5 }}\n            editable={!!setName}\n            placeholder={\"Enter name here\"}\n            onChangeText={(text) => setName(text)}\n            value={name}\n          />\n        </View>\n      </View>\n\n      <View style={{ flexDirection: 'row', width: '86%' }}>\n        <View style={{ flex: 2, justifyContent: 'center' }}>\n          <Text style={{ fontSize: 16, marginLeft: 5 }}>\n            {\"Procedure\"}\n          </Text>\n        </View>\n        <View style={{ flex: 5 }}>\n          <TextInput\n            style={{ height: 100, backgroundColor: 'ivory', marginBottom: 5 }}\n            placeholder={\"Enter procedure here\"}\n            multiline={true}\n            onChangeText={(text) => setProcedure(text)}\n            value={procedure}\n          />\n        </View>\n      </View>\n\n      <View style={{ flexDirection: 'row' }}>\n        <View style={{ margin: 10 }}>\n          <Button\n            title={\"SUBMIT ADD\"}\n            color={\"green\"}\n            onPress={() => submit()}\n          />\n        </View>\n        <View style={{ margin: 10 }}>\n          <Button\n            title={\"Cancel\"}\n            color={\"black\"}\n            onPress={() => cancel()}\n          />\n        </View>\n      </View>\n    </View>\n  )\n}\n\nfunction Add(props) {\n  const { doneAdding } = props\n  const [ name, setName ] = useState(\"\")\n  const [ procedure, setProcedure ] = useState(\"\")\n\n  return (\n    <Routine\n      name={name}\n      procedure={procedure}\n      setName={setName}\n      setProcedure={setProcedure}\n      submit={() => {\n        addRoutineOnServer({ name, procedure }, () => {\n          doneAdding()\n        })\n      }}\n      cancel={() => {\n        doneAdding()\n      }}\n    />\n  )\n}\n\n\nexport default Container\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}